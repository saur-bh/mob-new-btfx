---
alwaysApply: true
---
Here is your fully regenerated and cleaned-up MDC file for Trae for your Bitfinex automation framework:

â¸»


---
description: MDC for Bitfinex Mobile Automation using Maestro (iOS + Android + Trae)
---

# ðŸŽ¯ Overview

This MDC defines the setup, structure, and runtime context for **Bitfinex iOS and Android UI automation** using **Maestro CLI** with **Trae MCP integration**.

---

## ðŸš€ Installation and Setup

### Install Maestro on macOS

```bash
curl -Ls "https://get.maestro.mobile.dev" | bash
maestro login

# Get Booted Device
xcrun simctl list devices booted

# Java Setup Fix (if needed)
echo 'export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home' >> ~/.zshrc
echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.zshrc
source ~/.zshrc
```

â¸»

## ðŸ—‚ Folder Structure

```
bitfixnex/
â”œâ”€â”€ flows/shared/            # Reusable test flows
â”‚   â”œâ”€â”€ app_setup.yaml
â”‚   â”œâ”€â”€ login_completion.yaml
â”‚   â”œâ”€â”€ login_flow.yaml
â”‚   â”œâ”€â”€ pin_creation.yaml
â”‚   â”œâ”€â”€ pin_enter.yaml
â”‚   â”œâ”€â”€ navigation_account.yaml
â”‚   â”œâ”€â”€ navigation_earn.yaml
â”‚   â”œâ”€â”€ navigation_home.yaml
â”‚   â”œâ”€â”€ navigation_pay.yaml
â”‚   â”œâ”€â”€ navigation_test.yaml
â”‚   â””â”€â”€ navigation_wallets.yaml
â”œâ”€â”€ testdata/                # Test data files
â”‚   â”œâ”€â”€ testdata-staging.js
â”‚   â””â”€â”€ testdata-prod.js
â”œâ”€â”€ tests/                   # Main test files
â”‚   â”œâ”€â”€ login_test.yaml
â”‚   â””â”€â”€ navigation_test.yaml
â”œâ”€â”€ utils/                   # Utility scripts
â”‚   â”œâ”€â”€ check_mcp.sh
â”‚   â”œâ”€â”€ run_mcp_test.sh
â”‚   â””â”€â”€ run_test.sh
â”œâ”€â”€ apps/                    # Application files
â”‚   â””â”€â”€ README.md
â”œâ”€â”€ reports/                 # Test reports and logs (auto-generated)
â”‚   â”œâ”€â”€ android/
â”‚   â”œâ”€â”€ ios/
â”‚   â”œâ”€â”€ screenshots/
â”‚   â””â”€â”€ recordings/
â”œâ”€â”€ .trae/                   # Trae IDE integration
â”‚   â””â”€â”€ rules/
â”‚       â”œâ”€â”€ documentation-framework.mdc
â”‚       â””â”€â”€ maestro-mcp-setup.mdc
â”œâ”€â”€ config.yaml
â”œâ”€â”€ setup.sh
â””â”€â”€ .gitignore
```

---

## ðŸ§  Trae MCP Integration

### Configuration Files

#### `.trae/mcp.json`
```json
{
  "mcpServers": {
    "maestro": {
      "command": "maestro",
      "args": ["mcp"],
      "env": {
        "MAESTRO_WORKSPACE": "${workspaceFolder}",
        "MAESTRO_CONFIG": "${workspaceFolder}/config.yaml"
      }
    }
  },
  "contextProviders": [
    {
      "type": "maestro",
      "config": {
        "flowsDir": "flows/shared",
        "testdataDir": "testdata",
        "testsDir": "tests",
        "utilsDir": "utils",
        "reportsDir": "reports"
      }
    }
  ]
}
```

### AI-Assisted Features

1. **Test Generation**: Generate Maestro flows using natural language
2. **Debugging Support**: AI assistance for troubleshooting failures
3. **Element Selection**: Smart selector recommendations
4. **Documentation**: Auto-generate test documentation
5. **Code Completion**: Context-aware suggestions

---

## ðŸ“± Platform Support

### Staging Environment
- **Device**: Android Emulator or iOS Simulator
- **App ID**: `com.bitfinex.mobileapp.dev` (Android) / `com.bitfinex.mobileapp` (iOS)
- **Platform**: `android` or `ios`
- **Test Data**: `testdata/testdata-staging.js`

### Production Environment
- **Device**: Physical Device or Simulator
- **App ID**: `com.bitfinex.mobileapp`
- **Platform**: `android` or `ios`
- **Test Data**: `testdata/testdata-prod.js`

---

## ðŸ”§ Usage Examples

### Basic Test Flow
```yaml
appId: com.bitfinex.mobileapp.dev
---
- launchApp
- tapOn: "Login"
- inputText: "user@example.com"
- tapOn: "Continue"
```

### Using Shared Flows
```yaml
appId: com.bitfinex.mobileapp.dev
---
- runFlow: flows/shared/login_flow.yaml
- runFlow: flows/shared/navigation_wallets.yaml
- assertVisible: "Balance"
```

---

## ðŸ“š Resources

- **Maestro Documentation**: https://maestro.mobile.dev/
- **Trae IDE**: https://trae.ai/
- **MCP Protocol**: https://modelcontextprotocol.io/
- **Bitfinex API**: https://docs.bitfinex.com/

---

## ðŸŽ¯ Best Practices

1. **Modular Flows**: Break complex tests into reusable shared flows
2. **Environment Separation**: Use separate test data for staging and production
3. **Data-Driven**: Use external test data files (testdata-staging.js, testdata-prod.js)
4. **Error Handling**: Include proper assertions and error recovery
5. **Documentation**: Keep flows well-documented and maintainable
6. **MCP Integration**: Leverage AI assistance for test generation and debugging

---

*This framework is optimized for Trae IDE with MCP integration for enhanced AI-assisted testing capabilities.*