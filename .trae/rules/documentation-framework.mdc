---
alwaysApply: true
---
Here is your fully regenerated and cleaned-up MDC file for Trae for your Bitfinex automation framework:

â¸»


---
description: MDC for Bitfinex Mobile Automation using Maestro (iOS + Android + Trae)
---

# ðŸŽ¯ Overview

This MDC defines the setup, structure, and runtime context for **Bitfinex iOS and Android UI automation** using **Maestro CLI** with **Trae MCP integration**.

---

## ðŸš€ Installation and Setup

### Install Maestro on macOS

```bash
curl -Ls "https://get.maestro.mobile.dev" | bash
maestro login

# Get Booted Device
xcrun simctl list devices booted

# Java Setup Fix (if needed)
echo 'export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home' >> ~/.zshrc
echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.zshrc
source ~/.zshrc
```

â¸»

## ðŸ—‚ Folder Structure

```
BITFINEX/
â”œâ”€â”€ driver/                  # Entry point tests
â”‚   â””â”€â”€ smoke-login.yaml
â”œâ”€â”€ elements/                # JS Page Object files
â”‚   â”œâ”€â”€ login.js
â”‚   â”œâ”€â”€ fastPay.js
â”‚   â””â”€â”€ ...
â”œâ”€â”€ subflows/                # Shared reusable flows
â”‚   â”œâ”€â”€ passcodePage.yaml
â”‚   â”œâ”€â”€ loginFlow.yaml
â”‚   â””â”€â”€ ...
â”œâ”€â”€ testdata/                # Test data files
â”‚   â”œâ”€â”€ testdata-android.js
â”‚   â”œâ”€â”€ testdata-ios.js
â”‚   â””â”€â”€ ...
â”œâ”€â”€ utils/                   # Utility scripts
â”‚   â”œâ”€â”€ setup.sh
â”‚   â”œâ”€â”€ check_mcp.sh
â”‚   â””â”€â”€ ...
â”œâ”€â”€ reports/                 # Test reports and logs
â”‚   â”œâ”€â”€ screenshots/
â”‚   â”œâ”€â”€ recordings/
â”‚   â””â”€â”€ *.log
â”œâ”€â”€ apps/                    # Application files
â”‚   â”œâ”€â”€ bitfinex-android.apk
â”‚   â””â”€â”€ bitfinex-ios.app
â””â”€â”€ .trae/                   # Trae IDE integration
    â”œâ”€â”€ mcp.json
    â””â”€â”€ rules/
        â””â”€â”€ documentation-framework.mdc
```

---

## ðŸ§  Trae MCP Integration

### Configuration Files

#### `.trae/mcp.json`
```json
{
  "mcpServers": {
    "maestro": {
      "command": "maestro",
      "args": ["mcp"],
      "env": {
        "MAESTRO_WORKSPACE": "${workspaceFolder}",
        "MAESTRO_CONFIG": "${workspaceFolder}/config.yaml"
      }
    }
  }
}
```

### AI-Assisted Features

1. **Test Generation**: Generate Maestro flows using natural language
2. **Debugging Support**: AI assistance for troubleshooting failures
3. **Element Selection**: Smart selector recommendations
4. **Documentation**: Auto-generate test documentation
5. **Code Completion**: Context-aware suggestions

---

## ðŸ“± Platform Support

### Android Configuration
- **Device**: Android Emulator or Physical Device
- **App ID**: `com.bitfinex.mobileapp.dev`
- **Platform**: `android`

### iOS Configuration
- **Device**: iOS Simulator or Physical Device
- **App ID**: `com.bitfinex.mobileapp`
- **Platform**: `ios`

---

## ðŸ”§ Usage Examples

### Basic Test Flow
```yaml
appId: com.bitfinex.mobileapp.dev
---
- launchApp
- tapOn: "Login"
- inputText: "user@example.com"
- tapOn: "Continue"
```

### Using Subflows
```yaml
appId: com.bitfinex.mobileapp.dev
---
- runFlow: subflows/loginFlow.yaml
- tapOn: "Portfolio"
- assertVisible: "Balance"
```

---

## ðŸ“š Resources

- **Maestro Documentation**: https://maestro.mobile.dev/
- **Trae IDE**: https://trae.ai/
- **MCP Protocol**: https://modelcontextprotocol.io/
- **Bitfinex API**: https://docs.bitfinex.com/

---

## ðŸŽ¯ Best Practices

1. **Use Page Objects**: Organize elements in separate JS files
2. **Modular Flows**: Break complex tests into reusable subflows
3. **Data-Driven**: Use external test data files
4. **Error Handling**: Include proper assertions and error recovery
5. **Documentation**: Keep flows well-documented and maintainable

---

*This framework is optimized for Trae IDE with MCP integration for enhanced AI-assisted testing capabilities.*